CREATE SEQUENCE USERS_HISTORY_INC START WITH 1;
CREATE SEQUENCE Sessions_History_INC START WITH 1;
CREATE SEQUENCE Tablespace_History_INC START WITH 1;
CREATE SEQUENCE Datafile_History_INC START WITH 1;
CREATE SEQUENCE Memory_History_INC START WITH 1;

-- Users_History

CREATE OR REPLACE TRIGGER Users_History_trig
AFTER INSERT OR UPDATE ON OR DELETE USER_T
BEGIN
    IF INSERTING THEN
        INSERT INTO USER_HISTORY (USER_HISTORY_ID, TIME_STAMP, USER_ID, USER_ID_Hist, USERNAME, EXPIRATION_DATE, STATUS, CREATED_DATE)
        VALUES (USERS_HISTORY_INC.NEXTVAL,CURRENT_TIMESTAMP,:new.USER_ID, :new.USER_ID, :new.USERNAME , :new.EXPIRATION_DATE ,:new.STATUS ,:new.CREATED_DATE);
    ELSIF UPDATING THEN
        UPDATE USER_HISTORY
		SET TIME_STAMP = CURRENT_TIMESTAMP, USER_ID = :new.USER_ID, USER_ID_Hist = :new.USER_ID_Hist , USERNAME = :new.USERNAME , EXPIRATION_DATE = :new.EXPIRATION_DATE, STATUS = :new.STATUS , CREATED_DATE = :new.CREATED_DATE, USER_HISTORY_USER_FOREIGN_KEY = :new.USER_ID
		WHERE USER_ID = :new.USER_ID;
	ELSIF DELETING THEN
		UPDATE USER_HISTORY
		SET TIME_STAMP = USER_HISTORY_USER_FOREIGN_KEY = NULL 
		WHERE USER_ID = :new.USER_ID;
	END IF;
END;

-- Sessions_History

CREATE OR REPLACE TRIGGER Sessions_History_trig
AFTER INSERT OR UPDATE OR DELETE ON Sessions
BEGIN
	IF INSERTING THEN
		INSERT INTO Sessions_History (SESSIONS_HISTORY_ID, TIME_STAMP, SESSIONS_ID, SESSIONS_ID_hist, CPU, WAIT_SESSIONS, USER_ID)
		VALUES (Sessions_History_inc.NextVal,CURRENT_TIMESTAMP,:new.SESSIONS_ID,:new.SESSIONS_ID,:new.CPU,:new.WAIT_SESSIONS,:new.USER_ID);
	ELSIF UPDATING THEN
		UPDATE Sessions_History
		SET TIME_STAMP = CURRENT_TIMESTAMP, CPU = :new.CPU, WAIT_SESSIONS = :new.WAIT_SESSIONS, USER_ID = :new.USER_ID, SESSIONS_HISTORY_SESSIONS_FOREIGN_KEY = :new.SESSIONS_ID
		WHERE SESSIONS_ID = :new.SESSIONS_ID;
	ELSIF DELETING THEN
		UPDATE Sessions_History
		SET SESSIONS_HISTORY_SESSIONS_FOREIGN_KEY = NULL
		WHERE SESSIONS_ID = :new.SESSIONS_ID;
	END IF;
END;

-- Tablespace_History

CREATE OR REPLACE TRIGGER Tablespace_History
AFTER INSERT OR UPDATE OR DELETE ON Tablespace_T
BEGIN
	IF INSERTING THEN
		INSERT INTO Tablespace_History (TABLESPACE_HISTORY_ID, TIME_STAMP, TABLESPACE_ID)
		Values (Tablespace_History_INC.NEXTVAL,CURRENT_TIMESTAMP,:new.NAME_TABLESPACE);
	ELSIF UPDATING THEN
		UPDATE Tablespace_History
		SET TIME_STAMP = CURRENT_TIMESTAMP
		WHERE TABLESPACE_ID = :new.NAME_TABLESPACE;
	ELSIF DELETING THEN
		UPDATE Tablespace_History
		SET TABLESPACE_ID = NULL
		WHERE TABLESPACE_ID = :new.NAME_TABLESPACE;
	END IF;
END;


-- Datafile_History

CREATE OR REPLACE TRIGGER Datafile_History
AFTER INSERT OR UPDATE OR DELETE ON Datafile_T
BEGIN
	IF INSERTING THEN
		INSERT INTO Datafile_History (DATAFILE_HISTORY_ID,TIME_STAMP,DATAFILE_ID,DATAFILE_ID_hist,NAME_DATAFILE,USER_BYTES,AUTOEXTENSIBLE,STATUS,BYTES,NAME_TABLESPACE)
		VALUES (Datafile_History_INC.NEXTVAL,CURRENT_TIMESTAMP,:new.DATAFILE_ID, :new.DATAFILE_ID, :new.NAME_DATAFILE, :new.USER_BYTES, :new.AUTOEXTENSIBLE, :new.STATUS, :new.BYTES, :new.NAME_TABLESPACE);
	ELSIF UPDATING THEN
		UPDATE Datafile_History
		SET TIME_STAMP = CURRENT_TIMESTAMP,DATAFILE_ID = :new.DATAFILE_ID, DATAFILE_ID_hist= :new.DATAFILE_ID ,NAME_DATAFILE = :new.NAME_DATAFILE,USER_BYTES = :new.USER_BYTES ,AUTOEXTENSIBLE = :new.AUTOEXTENSIBLE ,STATUS = :new.STATUS ,BYTES = :new.BYTES ,NAME_TABLESPACE = :new.NAME_TABLESPACE, DATAFILE_HISTORY_DATAFILE_FOREIGN_KEY = :new.DATAFILE_ID
		WHERE DATAFILE_ID = :new.DATAFILE_ID;
	ELSIF DELETING THEN
		UPDATE Datafile_History
		SET DATAFILE_HISTORY_DATAFILE_FOREIGN_KEY = NULL
		WHERE DATAFILE_ID = :new.DATAFILE_ID;	
	END IF;
END;

-- Memory_History

CREATE OR REPLACE TRIGGER Memory_History
AFTER INSERT OR UPDATE OR DELETE ON Memory_T
BEGIN
	IF INSERTING THEN
		INSERT INTO Memory_History (MEMORY_HISTORY_ID,TIME_STAMP,MEMORY_ID,MEMORY_ID_hist,PGA,DATA_STORAGE,SGA,SHARED_IO_POOL,SHARED_POOL_MEMORY,BUFFER_CACHE_MEMORY,LARGE_POOL,JAVA_POOL,STREAM_POOL,NAME_TABLESPACE)
		VALUES (Memory_History_INC.NextVal,CURRENT_TIMESTAMP,:new.idMemory, :new.idMemory, :new.PGA, :new.DATA_STORAGE, :new.SGA, :new.SHARED_IO_POOL, :new.SHARED_POOL_MEMORY, :new.BUFFER_CACHE_MEMORY, :new.LARGE_POOL, :new.JAVA_POOL, :new.STREAM_POOL, :new.NAME_TABLESPACE);
	ELSIF UPDATING THEN
		UPDATE Memory_History
		SET TIME_STAMP = CURRENT_TIMESTAMP, MEMORY_ID = :new.idMemory,MEMORY_ID_hist = :new.idMemory,PGA = :new.PGA,DATA_STORAGE = :new.DATA_STORAGE ,SGA = :new.SGA,SHARED_IO_POOL = :new.SHARED_IO_POOL,SHARED_POOL_MEMORY = :new.SHARED_POOL_MEMORY,BUFFER_CACHE_MEMORY = :new.BUFFER_CACHE_MEMORY,LARGE_POOL = :new.LARGE_POOL,JAVA_POOL = :new.JAVA_POOL,STREAM_POOL = :new.STREAM_POOL,NAME_TABLESPACE = :new.NAME_TABLESPACE, MEMORY_HISTORY_MEMORY_FOREIGN_KEY = :new.idMemory
		WHERE MEMORY_ID = :new.idMemory;
	ELSIF DELETING THEN
		UPDATE Memory_History
		SET MEMORY_HISTORY_MEMORY_FOREIGN_KEY = NULL
		WHERE MEMORY_ID = :new.idMemory;	
	END IF;
END;
