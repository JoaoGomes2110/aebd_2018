CREATE SEQUENCE USERS_HISTORY_INC START WITH 1;
CREATE SEQUENCE Sessions_History_INC START WITH 1;
CREATE SEQUENCE Tablespace_History_INC START WITH 1;
CREATE SEQUENCE Datafile_History_INC START WITH 1;
CREATE SEQUENCE Memory_History_INC START WITH 1;

-- Users_History

CREATE OR REPLACE TRIGGER Users_History_trig
AFTER INSERT OR UPDATE ON USER_T
BEGIN
    IF INSERTING THEN
        INSERT INTO USER_HISTORY (USER_HISTORY_ID, TIME_STAMP, USER_ID)
        VALUES (USERS_HISTORY_INC.NEXTVAL,CURRENT_TIMESTAMP,:new.USER_ID);
    ELSIF UPDATING THEN
        UPDATE USER_HISTORY
		SET TIME_STAMP = CURRENT_TIMESTAMP
		WHERE USER_ID = :new.USER_ID;
	END IF;
END;

-- Sessions_History

CREATE OR REPLACE TRIGGER Sessions_History_trig
AFTER INSERT OR UPDATE ON Sessions
BEGIN
	IF INSERTING THEN
		INSERT INTO Sessions_History (SESSIONS_HISTORY_ID, TIME_STAMP, SESSIONS_ID)
		VALUES (Sessions_History_inc.NextVal,CURRENT_TIMESTAMP,:new.SESSIONS_ID);
	ELSIF UPDATING THEN
		UPDATE Sessions_History
		SET TIME_STAMP = CURRENT_TIMESTAMP
		WHERE SESSIONS_ID = :new.SESSIONS_ID;
	END IF;
END;

-- Tablespace_History

CREATE OR REPLACE TRIGGER Tablespace_History
AFTER INSERT OR UPDATE ON Tablespace_T
BEGIN
	IF INSERTING THEN
		INSERT INTO Tablespace_History (TABLESPACE_HISTORY_ID, TIME_STAMP, TABLESPACE_ID)
		Values (Tablespace_History_INC.NEXTVAL,CURRENT_TIMESTAMP,:new.NAME_TABLESPACE);
	ELSIF UPDATING THEN
		UPDATE Tablespace_History
		SET TIME_STAMP = CURRENT_TIMESTAMP
		WHERE TABLESPACE_ID = :new.NAME_TABLESPACE;
	END IF;
END;


-- Datafile_History

CREATE OR REPLACE TRIGGER Datafile_History
AFTER INSERT OR UPDATE ON Datafile_T
BEGIN
	IF INSERTING THEN
		INSERT INTO Datafile_History (DATAFILE_HISTORY_ID,TIME_STAMP,DATAFILE_ID)
		VALUES (Datafile_History_INC.NEXTVAL,CURRENT_TIMESTAMP,:new.DATAFILE_ID);
	ELSIF UPDATING THEN
		UPDATE Datafile_History
		SET TIME_STAMP = CURRENT_TIMESTAMP
		WHERE DATAFILE_ID = :new.DATAFILE_ID;
	END IF;
END;

-- Memory_History

CREATE OR REPLACE TRIGGER Memory_History
AFTER INSERT OR UPDATE ON Memory_T
BEGIN
	IF INSERTING THEN
		INSERT INTO Memory_History (MEMORY_HISTORY_ID,TIME_STAMP,MEMORY_ID)
		VALUES (Memory_History_INC.NextVal,CURRENT_TIMESTAMP,:new.idMemory);
	ELSIF UPDATING THEN
		UPDATE Memory_History
		SET TIME_STAMP = CURRENT_TIMESTAMP
		WHERE MEMORY_ID = :new.idMemory;
	END IF;
END;
